
           0C0
       1C0   1C1
    2C0   2C1   2C2
 3C0   3C1   3C2    3C3



Algorithm:Triangle pascal

Method : We can optimize the above code by the following concept of a Binomial Coefficient,
the i’th entry in a line number line is Binomial Coefficient C(line, i)
 and all lines start with value 1.
 The idea is to calculate C(line, i) using C(line, i-1).

C(line, i) = C(line, i-1) * (line - i + 1) / i

1-Take a number of rows to be printed, lets assume it to be n
2-Make outer iteration i from 0 to n times to print the rows.
3_Make inner iteration for j from 0 to (N – 1).
4-Print single blank space ” “.
5-Close inner loop (j loop) //its needed for left spacing.
6-Make inner iteration for j from 0 to i.
7-Print nCr of i and j.
8-Close inner loop.
9-Print newline character (\n) after each inner iteration.


Algoritn : The number of good pairs

Method
The code counts the number of identical pairs in an array 'nums'.
It uses a HashMap 'mpp' to store the frequency of each number in the array.
It then iterates through the HashMap and for each frequency 'n',
it calculates the count of identical pairs using the formula (n - 1) * n / 2
and adds it to the 'count' variable.
 Finally, it returns the 'count' as the result.
 This code efficiently computes the count of identical pairs in linear time using a HashMap to keep track of frequencies.
 O(n)
  public int numIdenticalPairs(int[] nums) {
         HashMap<Integer, Integer> count = new HashMap<>();
         int result = 0;

         for (int num : nums) {
             count.put(num, count.getOrDefault(num, 0) + 1);
             result += count.get(num) - 1;
         }

         return result;
     }